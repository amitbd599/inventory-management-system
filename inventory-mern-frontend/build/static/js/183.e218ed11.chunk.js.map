{"version":3,"file":"static/js/183.e218ed11.chunk.js","mappings":"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","sources":["APIRequest/UsersAPIRequest.js","components/Users/SendOTP.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { ErrorToast, SuccessToast } from \"../helper/FormHelper\";\nimport store from \"../redux/store/store\";\nimport { HideLoader, ShowLoader } from \"../redux/state-slice/settings-slice\";\nimport { getToken, setEmail, setOTP, setToken, setUserDetails } from \"../helper/SessionHelper\";\nimport { SetProfile } from \"../redux/state-slice/profile-slice\";\nimport { BaseURL } from \"../helper/config\";\n\n\nconst AxiosHeader = { headers: { \"token\": getToken() } }\n\nexport async function LoginRequest(email, password) {\n    try {\n\n        store.dispatch(ShowLoader())\n\n        let URL = BaseURL + \"/Login\";\n\n        let PostBody = { \"email\": email, \"password\": password }\n\n        return await axios.post(URL, PostBody, {\n            withCredentials: true\n        }).then((result) => {\n            console.log(result.data.status);\n\n            if (result.data.status === \"success\") {\n                setToken(result.data['token']);\n                setUserDetails(result.data['data']);\n                SuccessToast(\"Login Success\")\n                store.dispatch(HideLoader())\n                return true;\n            } else {\n                ErrorToast(\"Invalid Email or Password\")\n                store.dispatch(HideLoader())\n                return false;\n            }\n        })\n\n\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Invalid Email or Password\")\n        return false;\n    }\n}\n\n\n\n\nexport async function RegistrationRequest(email, firstName, lastName, mobile, password, photo) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/Registration\";\n        let PostBody = { email: email, firstName: firstName, lastName: lastName, mobile: mobile, password: password, photo: photo }\n        let res = await axios.post(URL, PostBody)\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                if (res.data['data']['keyPattern']['email'] === 1) {\n                    ErrorToast(\"Email Already Exist\")\n                    return false;\n                }\n                else {\n                    ErrorToast(\"Something Went Wrong\")\n                    return false;\n                }\n            }\n            else {\n                SuccessToast(\"Registration Success\")\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n        return false;\n    }\n}\n\nexport async function GetProfileDetails() {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/ProfileDetails\";\n        let res = await axios.get(URL, AxiosHeader)\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            store.dispatch(SetProfile(res.data['data'][0]))\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n    }\n}\n\nexport async function ProfileUpdateRequest(email, firstName, lastName, mobile, password, photo) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/ProfileUpdate\";\n        let PostBody = { email: email, firstName: firstName, lastName: lastName, mobile: mobile, password: password, photo: photo }\n        let UserDetails = { email: email, firstName: firstName, lastName: lastName, mobile: mobile, photo: photo };\n        let res = await axios.post(URL, PostBody, AxiosHeader);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            SuccessToast(\"Profile Update Success\")\n            setUserDetails(UserDetails)\n            return true;\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n        return false;\n    }\n\n}\n\nexport async function RecoverVerifyEmailRequest(email) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/RecoverVerifyEmail/\" + email;\n        let res = await axios.get(URL);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                ErrorToast(\"No user found\");\n                return false;\n            }\n            else {\n                setEmail(email)\n                SuccessToast(\"A 6 Digit verification code has been sent to your email address. \");\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\");\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n        return false;\n    }\n}\n\nexport async function RecoverVerifyOTPRequest(email, OTP) {\n\n    try {\n        store.dispatch(ShowLoader());\n        let URL = BaseURL + \"/RecoverVerifyOTP/\" + email + \"/\" + OTP;\n        let res = await axios.get(URL);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                ErrorToast(\"Code Verification Fail\");\n                return false;\n            }\n            else {\n                setOTP(OTP)\n                SuccessToast(\"Code Verification Success\");\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n\n        return false;\n    }\n}\n\nexport async function RecoverResetPassRequest(email, OTP, password) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/RecoverResetPass\";\n        let PostBody = { email: email, OTP: OTP, password: password };\n        let res = await axios.post(URL, PostBody);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                ErrorToast(res.data['data']);\n                return false;\n            }\n            else {\n                setOTP(OTP)\n                SuccessToast(\"NEW PASSWORD CREATED\");\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n        return false;\n    }\n}","import React, {Fragment, useRef} from 'react';\nimport {ErrorToast, IsEmail} from \"../../helper/FormHelper\";\nimport {RecoverVerifyEmailRequest} from \"../../APIRequest/UsersAPIRequest\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst SendOTP = () => {\n\n    let emailRef=useRef();\n    let navigate=useNavigate();\n\n    const VerifyEmail=async () => {\n        let email = emailRef.value;\n        if (IsEmail(email)) {\n            ErrorToast(\"Valid Email Address Required !\")\n        } else {\n            let result = await RecoverVerifyEmailRequest(email)\n            if (result === true) {\n                navigate(\"/VerifyOTP\")\n            }\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"container\">\n                <div className=\"row d-flex justify-content-center\">\n                    <div className=\"col-md-7 col-lg-6 center-screen\">\n                        <div className=\"card w-90\">\n                            <div className=\"card-body text-start\">\n                                <h4>EMAIL ADDRESS</h4>\n                                <hr/>\n                                <label>Your email address</label>\n                                <input ref={(input)=>emailRef=input}  placeholder=\"User Email\" className=\"form-control\" type=\"email\"/>\n                                <br/>\n                                <button onClick={VerifyEmail} className=\"btn w-100 btn-success\">Next</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default SendOTP;"],"names":["AxiosHeader","headers","getToken","async","LoginRequest","email","password","store","dispatch","ShowLoader","URL","BaseURL","PostBody","axios","withCredentials","then","result","console","log","data","status","setToken","setUserDetails","SuccessToast","HideLoader","ErrorToast","e","RegistrationRequest","firstName","lastName","mobile","photo","res","GetProfileDetails","SetProfile","ProfileUpdateRequest","UserDetails","RecoverVerifyEmailRequest","setEmail","RecoverVerifyOTPRequest","OTP","setOTP","RecoverResetPassRequest","SendOTP","emailRef","useRef","navigate","useNavigate","_jsx","Fragment","children","className","_jsxs","ref","input","placeholder","type","onClick","value","IsEmail"],"sourceRoot":""}