{"version":3,"file":"static/js/641.59e9efe2.chunk.js","mappings":"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","sources":["APIRequest/UsersAPIRequest.js","components/Users/Profile.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { ErrorToast, SuccessToast } from \"../helper/FormHelper\";\nimport store from \"../redux/store/store\";\nimport { HideLoader, ShowLoader } from \"../redux/state-slice/settings-slice\";\nimport { getToken, setEmail, setOTP, setToken, setUserDetails } from \"../helper/SessionHelper\";\nimport { SetProfile } from \"../redux/state-slice/profile-slice\";\nimport { BaseURL } from \"../helper/config\";\n\n\nconst AxiosHeader = { headers: { \"token\": getToken() } }\n\nexport async function LoginRequest(email, password) {\n    try {\n\n        store.dispatch(ShowLoader())\n\n        let URL = BaseURL + \"/Login\";\n\n        let PostBody = { \"email\": email, \"password\": password }\n\n        return await axios.post(URL, PostBody, {\n            withCredentials: true\n        }).then((result) => {\n            console.log(result.data.status);\n\n            if (result.data.status === \"success\") {\n                setToken(result.data['token']);\n                setUserDetails(result.data['data']);\n                SuccessToast(\"Login Success\")\n                store.dispatch(HideLoader())\n                return true;\n            } else {\n                ErrorToast(\"Invalid Email or Password\")\n                store.dispatch(HideLoader())\n                return false;\n            }\n        })\n\n\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Invalid Email or Password\")\n        return false;\n    }\n}\n\n\n\n\nexport async function RegistrationRequest(email, firstName, lastName, mobile, password, photo) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/Registration\";\n        let PostBody = { email: email, firstName: firstName, lastName: lastName, mobile: mobile, password: password, photo: photo }\n        let res = await axios.post(URL, PostBody)\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                if (res.data['data']['keyPattern']['email'] === 1) {\n                    ErrorToast(\"Email Already Exist\")\n                    return false;\n                }\n                else {\n                    ErrorToast(\"Something Went Wrong\")\n                    return false;\n                }\n            }\n            else {\n                SuccessToast(\"Registration Success\")\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n        return false;\n    }\n}\n\nexport async function GetProfileDetails() {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/ProfileDetails\";\n        let res = await axios.get(URL, AxiosHeader)\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            store.dispatch(SetProfile(res.data['data'][0]))\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n    }\n}\n\nexport async function ProfileUpdateRequest(email, firstName, lastName, mobile, password, photo) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/ProfileUpdate\";\n        let PostBody = { email: email, firstName: firstName, lastName: lastName, mobile: mobile, password: password, photo: photo }\n        let UserDetails = { email: email, firstName: firstName, lastName: lastName, mobile: mobile, photo: photo };\n        let res = await axios.post(URL, PostBody, AxiosHeader);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            SuccessToast(\"Profile Update Success\")\n            setUserDetails(UserDetails)\n            return true;\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n        return false;\n    }\n\n}\n\nexport async function RecoverVerifyEmailRequest(email) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/RecoverVerifyEmail/\" + email;\n        let res = await axios.get(URL);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                ErrorToast(\"No user found\");\n                return false;\n            }\n            else {\n                setEmail(email)\n                SuccessToast(\"A 6 Digit verification code has been sent to your email address. \");\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\");\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n        return false;\n    }\n}\n\nexport async function RecoverVerifyOTPRequest(email, OTP) {\n\n    try {\n        store.dispatch(ShowLoader());\n        let URL = BaseURL + \"/RecoverVerifyOTP/\" + email + \"/\" + OTP;\n        let res = await axios.get(URL);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                ErrorToast(\"Code Verification Fail\");\n                return false;\n            }\n            else {\n                setOTP(OTP)\n                SuccessToast(\"Code Verification Success\");\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n\n        return false;\n    }\n}\n\nexport async function RecoverResetPassRequest(email, OTP, password) {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/RecoverResetPass\";\n        let PostBody = { email: email, OTP: OTP, password: password };\n        let res = await axios.post(URL, PostBody);\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            if (res.data['status'] === \"fail\") {\n                ErrorToast(res.data['data']);\n                return false;\n            }\n            else {\n                setOTP(OTP)\n                SuccessToast(\"NEW PASSWORD CREATED\");\n                return true;\n            }\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n            return false;\n        }\n    }\n    catch (e) {\n        ErrorToast(\"Something Went Wrong\")\n        store.dispatch(HideLoader())\n        return false;\n    }\n}","import React, {useEffect, useRef} from 'react';\nimport {GetProfileDetails, ProfileUpdateRequest} from \"../../APIRequest/UsersAPIRequest\";\nimport {useSelector} from \"react-redux\";\nimport {ErrorToast, getBase64, IsEmail, IsEmpty, IsMobile} from \"../../helper/FormHelper\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst Profile = () => {\n\n    let emailRef,firstNameRef,lastNameRef,mobileRef,passwordRef,userImgRef,userImgView=useRef();\n\n    useEffect(()=>{\n        (async () => {\n            await GetProfileDetails()\n        })();\n    },[])\n\n    const ProfileData = useSelector((state) => state.profile.value);\n\n    let navigate=useNavigate();\n\n    const PreviewImage = () => {\n        let ImgFile = userImgRef.files[0];\n        getBase64(ImgFile).then((base64Img)=>{\n            userImgView.src=base64Img;\n        })\n    }\n\n    const UpdateMyProfile = async () => {\n        let email = emailRef.value;\n        let fastName = firstNameRef.value;\n        let lastName = lastNameRef.value;\n        let mobile = mobileRef.value;\n        let password = passwordRef.value;\n        let photo = userImgView.src\n\n        if (IsEmail(email)) {\n            ErrorToast(\"Valid Email Address Required !\")\n        } else if (IsEmpty(fastName)) {\n            ErrorToast(\"First Name Required !\")\n        } else if (IsEmpty(lastName)) {\n            ErrorToast(\"Last Name Required !\")\n        } else if (!IsMobile(mobile)) {\n            ErrorToast(\"Valid Mobile  Required !\")\n        } else if (IsEmpty(password)) {\n            ErrorToast(\"Password Required !\")\n        } else {\n            let result = await ProfileUpdateRequest(email, fastName, lastName, mobile, password, photo)\n            if (result === true) {\n                navigate(\"/\")\n            }\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row d-flex justify-content-center\">\n                <div className=\"col-md-12\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <div className=\"container-fluid\">\n                                <img  ref={(input)=>userImgView=input} className=\"icon-nav-img-lg\" src={ProfileData['photo']} alt=\"\"/>\n                                <hr/>\n                                <div className=\"row\">\n                                    <div className=\"col-4 p-2\">\n                                        <label>Profile Picture</label>\n                                        <input onChange={PreviewImage}  ref={(input)=>userImgRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"file\"/>\n                                    </div>\n                                    <div className=\"col-4 p-2\">\n                                        <label>Email Address</label>\n                                        <input key={Date.now()} defaultValue={ProfileData['email']}  readOnly={true}  ref={(input)=>emailRef=input} placeholder=\"User Email\" className=\"form-control animated fadeInUp\" type=\"email\"/>\n                                    </div>\n                                    <div className=\"col-4 p-2\">\n                                        <label>First Name</label>\n                                        <input  key={Date.now()} defaultValue={ProfileData['firstName']} ref={(input)=>firstNameRef=input} placeholder=\"First Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\n                                    </div>\n                                    <div className=\"col-4 p-2\">\n                                        <label>Last Name</label>\n                                        <input key={Date.now()} defaultValue={ProfileData['lastName']}  ref={(input)=>lastNameRef=input} placeholder=\"Last Name\" className=\"form-control animated fadeInUp\" type=\"text\"/>\n                                    </div>\n                                    <div className=\"col-4 p-2\">\n                                        <label>Mobile</label>\n                                        <input key={Date.now()} defaultValue={ProfileData['mobile']} ref={(input)=>mobileRef=input} placeholder=\"Mobile\" className=\"form-control animated fadeInUp\" type=\"mobile\"/>\n                                    </div>\n                                    <div className=\"col-4 p-2\">\n                                        <label>Password</label>\n                                        <input key={Date.now()} defaultValue={ProfileData['password']}  ref={(input)=>passwordRef=input} placeholder=\"User Password\" className=\"form-control animated fadeInUp\" type=\"password\"/>\n                                    </div>\n                                    <div className=\"col-4 p-2\">\n                                        <button onClick={UpdateMyProfile}  className=\"w-100  btn btn-success\">Update</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Profile;"],"names":["AxiosHeader","headers","getToken","async","LoginRequest","email","password","store","dispatch","ShowLoader","URL","BaseURL","PostBody","axios","withCredentials","then","result","console","log","data","status","setToken","setUserDetails","SuccessToast","HideLoader","ErrorToast","e","RegistrationRequest","firstName","lastName","mobile","photo","res","GetProfileDetails","SetProfile","ProfileUpdateRequest","UserDetails","RecoverVerifyEmailRequest","setEmail","RecoverVerifyOTPRequest","OTP","setOTP","RecoverResetPassRequest","Profile","emailRef","firstNameRef","lastNameRef","mobileRef","passwordRef","userImgRef","userImgView","useRef","useEffect","ProfileData","useSelector","state","profile","value","navigate","useNavigate","_jsx","className","children","_jsxs","ref","input","src","alt","onChange","PreviewImage","ImgFile","files","getBase64","base64Img","placeholder","type","defaultValue","readOnly","Date","now","onClick","fastName","IsEmail","IsEmpty","IsMobile"],"sourceRoot":""}