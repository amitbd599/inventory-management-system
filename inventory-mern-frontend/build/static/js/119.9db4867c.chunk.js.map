{"version":3,"file":"static/js/119.9db4867c.chunk.js","mappings":"kOAYA,MAAMA,EAAc,CAAEC,QAAS,CAAE,OAASC,EAAAA,EAAAA,Q,oDCP1C,MAiRA,EAjRkBC,MAEdC,EAAAA,EAAAA,YAAU,KACN,iBDODC,iBACH,IAEIC,EAAAA,EAAMC,UAASC,EAAAA,EAAAA,OAEf,IAAIC,EAAMC,EAAAA,EAAU,mBAEhBC,QAAYC,IAAAA,IAAUH,EAAKT,GAE/BM,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,OACI,MAAfF,EAAIG,QAEJR,EAAAA,EAAMC,UAASQ,EAAAA,EAAAA,IAAgBJ,EAAIK,KAAW,KAAE,GAAe,aAC/DV,EAAAA,EAAMC,UAASU,EAAAA,EAAAA,IAAgBN,EAAIK,KAAW,KAAE,GAAU,MAAE,GAAgB,gBAG5EE,EAAAA,EAAAA,IAAW,uBAEnB,CACA,MAAOC,GACHb,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,QACfK,EAAAA,EAAAA,IAAW,uBACf,CACJ,CC7BkBE,SDmDXf,iBACH,IACIC,EAAAA,EAAMC,UAASC,EAAAA,EAAAA,OACf,IAAIC,EAAMC,EAAAA,EAAU,gBAChBC,QAAYC,IAAAA,IAAUH,EAAKT,GAC/BM,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,OACI,MAAfF,EAAIG,QACJR,EAAAA,EAAMC,UAASc,EAAAA,EAAAA,IAAaV,EAAIK,KAAW,KAAE,GAAe,aAC5DV,EAAAA,EAAMC,UAASe,EAAAA,EAAAA,IAAaX,EAAIK,KAAW,KAAE,GAAU,MAAE,GAAgB,gBAGzEE,EAAAA,EAAAA,IAAW,uBAEnB,CACA,MAAOC,GACHb,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,QACfK,EAAAA,EAAAA,IAAW,uBACf,CACJ,CCpEkBK,SD8BXlB,iBACH,IACIC,EAAAA,EAAMC,UAASC,EAAAA,EAAAA,OACf,IAAIC,EAAMC,EAAAA,EAAU,iBAChBC,QAAYC,IAAAA,IAAUH,EAAKT,GAC/BM,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,OACI,MAAfF,EAAIG,QACJR,EAAAA,EAAMC,UAASiB,EAAAA,EAAAA,IAAeb,EAAIK,KAAW,KAAE,GAAe,aAC9DV,EAAAA,EAAMC,UAASkB,EAAAA,EAAAA,IAAed,EAAIK,KAAW,KAAE,GAAU,MAAE,GAAgB,gBAG3EE,EAAAA,EAAAA,IAAW,uBAEnB,CACA,MAAOC,GACHb,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,QACfK,EAAAA,EAAAA,IAAW,uBACf,CACJ,CC/CkBQ,SDqEXrB,iBACH,IACIC,EAAAA,EAAMC,UAASC,EAAAA,EAAAA,OACf,IAAIC,EAAMC,EAAAA,EAAU,mBAChBC,QAAYC,IAAAA,IAAUH,EAAKT,GAC/BM,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,OACI,MAAfF,EAAIG,QACJR,EAAAA,EAAMC,UAASoB,EAAAA,EAAAA,IAAiBhB,EAAIK,KAAW,KAAE,GAAe,aAChEV,EAAAA,EAAMC,UAASqB,EAAAA,EAAAA,IAAiBjB,EAAIK,KAAW,KAAE,GAAU,MAAE,GAAgB,gBAG7EE,EAAAA,EAAAA,IAAW,uBAEnB,CACA,MAAOC,GACHb,EAAAA,EAAMC,UAASM,EAAAA,EAAAA,QACfK,EAAAA,EAAAA,IAAW,uBACf,CACJ,CCtFkBW,EACT,EALD,EAKI,GACL,IAEH,IAAIC,GAAeC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUH,eACtDI,GAAeH,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUC,eAEtDC,GAAYJ,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUE,YACnDC,GAAYL,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUG,YAEnDC,GAAcN,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUI,cACrDC,GAAcP,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUK,cAGrDC,GAAgBR,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUM,gBACvDC,GAAgBT,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,UAAUO,gBAGvDxB,EAAOmB,EAAUM,KAAKC,GAASA,EAAKC,cAOxC,OANAC,QAAQC,IAAI7B,IAOR8B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,OAAMC,UAClBC,EAAAA,EAAAA,KAACC,IAAc,CAACC,MAAOjB,EAAckB,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,SAE/FL,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gCAEPC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAYQ,IAAI,mBAAmBC,IAAI,eAKtEP,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,QAAOC,UAClBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,OAAMC,UAClBC,EAAAA,EAAAA,KAACC,IAAc,CAACC,MAAOf,EAAWgB,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,SAE5FL,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6BAEPC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAYQ,IAAI,gBAAgBC,IAAI,eAKnEP,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,OAAMC,UAClBC,EAAAA,EAAAA,KAACC,IAAc,CAACC,MAAOX,EAAeY,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,SAEhGL,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBAEPC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAYQ,IAAI,oBAAoBC,IAAI,eAKvEP,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,OAAMC,UAClBC,EAAAA,EAAAA,KAACC,IAAc,CAACC,MAAOb,EAAac,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,SAE9FL,EAAAA,EAAAA,KAAA,KAAAD,SAAG,qBAEPC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,WAAUC,UACrBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAYQ,IAAI,kBAAkBC,IAAI,kBAMzEV,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKC,SAAA,EAChBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UAEtBC,EAAAA,EAAAA,KAACQ,EAAAA,EAAc,CACXC,QAAS,CACLC,MAAO,CACHC,KAAM,OACNC,OAAQ,IACRC,KAAM,CACFC,SAAS,IAGjBC,WAAY,CACRD,SAAS,GAEbE,OAAQ,CACJC,MAAO,YAGXC,OAAQrC,EAAaW,KAAKC,GAASA,EAAK0B,MACxCC,MAAO,CACHC,KAAM,+CACNC,MAAO,QAEXC,SAAU,CACNF,KAAM,kBACNC,MAAO,QAEXE,OAAQ,CACJC,gBAAiB,SAGzBC,OAAQ,CAAC,CACLC,KAAM,eACN5D,KAAMc,EAAaW,KAAKC,GAASA,EAAKC,gBAE1CiB,KAAK,OACLC,OAAQ,aAKxBZ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UAEtBC,EAAAA,EAAAA,KAACQ,EAAAA,EAAc,CACXC,QAAS,CACLC,MAAO,CACHC,KAAM,OACNC,OAAQ,IACRC,KAAM,CACFC,SAAS,IAGjBC,WAAY,CACRD,SAAS,GAEbE,OAAQ,CACJC,MAAO,YAGXC,OAAQhC,EAAUM,KAAKC,GAASA,EAAK0B,MACrCC,MAAO,CACHC,KAAM,6CACNC,MAAO,QAEXC,SAAU,CACNF,KAAM,kBACNC,MAAO,QAEXE,OAAQ,CACJC,gBAAiB,SAGzBC,OAAQ,CAAC,CACLC,KAAM,QACN5D,KAAMmB,EAAUM,KAAKC,GAASA,EAAKC,gBAEvCiB,KAAK,OACLC,OAAQ,aAKxBZ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UAEtBC,EAAAA,EAAAA,KAACQ,EAAAA,EAAc,CACXC,QAAS,CACLC,MAAO,CACHC,KAAM,OACNC,OAAQ,IACRC,KAAM,CACFC,SAAS,IAGjBC,WAAY,CACRD,SAAS,GAEbE,OAAQ,CACJC,MAAO,YAGXC,OAAQ5B,EAAcE,KAAKC,GAASA,EAAK0B,MACzCC,MAAO,CACHC,KAAM,gDACNC,MAAO,QAEXC,SAAU,CACNF,KAAM,kBACNC,MAAO,QAEXE,OAAQ,CACJC,gBAAiB,SAGzBC,OAAQ,CAAC,CACLC,KAAM,WACN5D,KAAMuB,EAAcE,KAAKC,GAASA,EAAKC,gBAE3CiB,KAAK,MACLC,OAAQ,aAKxBZ,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,UACjBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UAEtBC,EAAAA,EAAAA,KAACQ,EAAAA,EAAc,CACXC,QAAS,CACLC,MAAO,CACHC,KAAM,OACNC,OAAQ,IACRC,KAAM,CACFC,SAAS,IAGjBC,WAAY,CACRD,SAAS,GAEbE,OAAQ,CACJC,MAAO,UAGXC,OAAQ9B,EAAYI,KAAKC,GAASA,EAAK0B,MACvCC,MAAO,CACHC,KAAM,8CACNC,MAAO,QAEXC,SAAU,CACNF,KAAM,kBACNC,MAAO,QAEXE,OAAQ,CACJC,gBAAiB,SAGzBC,OAAQ,CAAC,CACLC,KAAM,SACN5D,KAAMqB,EAAYI,KAAKC,GAASA,EAAKC,gBAEzCiB,KAAK,OACLC,OAAQ,iBAM1B,C","sources":["APIRequest/SummaryAPIRequest.js","components/Dashboard/Dashboard.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { ErrorToast, SuccessToast } from \"../helper/FormHelper\";\nimport store from \"../redux/store/store\";\nimport { HideLoader, ShowLoader } from \"../redux/state-slice/settings-slice\";\nimport { getToken } from \"../helper/SessionHelper\";\nimport {\n    SetExpenseChart,\n    SetExpenseTotal, SetPurchaseChart, SetPurchaseTotal,\n    SetReturnChart,\n    SetReturnTotal, SetSaleChart, SetSaleTotal\n} from \"../redux/state-slice/dashboard-slice\";\nimport { BaseURL } from \"../helper/config\";\nconst AxiosHeader = { headers: { \"token\": getToken() } }\n\n\nexport async function ExpensesSummary() {\n    try {\n\n        store.dispatch(ShowLoader())\n\n        let URL = BaseURL + \"/ExpensesSummary\";\n\n        let res = await axios.get(URL, AxiosHeader)\n\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n\n            store.dispatch(SetExpenseChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetExpenseTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n    }\n}\n\nexport async function ReturnSummary() {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/ReturnSummary\";\n        let res = await axios.get(URL, AxiosHeader)\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            store.dispatch(SetReturnChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetReturnTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n    }\n}\n\nexport async function SaleSummary() {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/SalesSummary\";\n        let res = await axios.get(URL, AxiosHeader)\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            store.dispatch(SetSaleChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetSaleTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n    }\n}\n\nexport async function PurchaseSummary() {\n    try {\n        store.dispatch(ShowLoader())\n        let URL = BaseURL + \"/PurchaseSummary\";\n        let res = await axios.get(URL, AxiosHeader)\n        store.dispatch(HideLoader())\n        if (res.status === 200) {\n            store.dispatch(SetPurchaseChart(res.data['data'][0]['Last30Days']))\n            store.dispatch(SetPurchaseTotal(res.data['data'][0]['Total'][0]['TotalAmount']))\n        }\n        else {\n            ErrorToast(\"Something Went Wrong\")\n        }\n    }\n    catch (e) {\n        store.dispatch(HideLoader())\n        ErrorToast(\"Something Went Wrong\")\n    }\n}\n\n","import React, { useEffect } from 'react';\nimport { ExpensesSummary, PurchaseSummary, ReturnSummary, SaleSummary } from \"../../APIRequest/SummaryAPIRequest\";\nimport { useSelector } from \"react-redux\";\nimport CurrencyFormat from 'react-currency-format';\nimport ReactApexChart from 'react-apexcharts';\nconst Dashboard = () => {\n\n    useEffect(() => {\n        (async () => {\n            await ExpensesSummary()\n            await SaleSummary()\n            await ReturnSummary()\n            await PurchaseSummary()\n        })();\n    }, [])\n\n    let ExpenseChart = useSelector((state) => state.dashboard.ExpenseChart);\n    let ExpenseTotal = useSelector((state) => state.dashboard.ExpenseTotal);\n\n    let SaleChart = useSelector((state) => state.dashboard.SaleChart);\n    let SaleTotal = useSelector((state) => state.dashboard.SaleTotal);\n\n    let ReturnChart = useSelector((state) => state.dashboard.ReturnChart);\n    let ReturnTotal = useSelector((state) => state.dashboard.ReturnTotal);\n\n\n    let PurchaseChart = useSelector((state) => state.dashboard.PurchaseChart);\n    let PurchaseTotal = useSelector((state) => state.dashboard.PurchaseTotal);\n\n\n    let data = SaleChart.map((item) => item.TotalAmount)\n    console.log(data);\n\n\n\n\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row top_card\">\n                <div className=\"col-md-3 p-2\">\n                    <div className=\"card\">\n                        <div className=\"card-body one\">\n                            <div>\n                                <span className=\"text\">\n                                    <CurrencyFormat value={ExpenseTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Calculate total expense</p>\n                            </div>\n                            <div className='icon_img'>\n                                <img className='img-fluid' src=\"/img/Expense.png\" alt=\"\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-3 p-2\">\n                    <div className=\"card \">\n                        <div className=\"card-body two\">\n                            <div>\n                                <span className=\"text\">\n                                    <CurrencyFormat value={SaleTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Calculate total sale</p>\n                            </div>\n                            <div className='icon_img'>\n                                <img className='img-fluid' src=\"/img/Sale.png\" alt=\"\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-3 p-2\">\n                    <div className=\"card\">\n                        <div className=\"card-body three\">\n                            <div>\n                                <span className=\"text\">\n                                    <CurrencyFormat value={PurchaseTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Total Purchase</p>\n                            </div>\n                            <div className='icon_img'>\n                                <img className='img-fluid' src=\"/img/Purchase.png\" alt=\"\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-3 p-2\">\n                    <div className=\"card\">\n                        <div className=\"card-body four\">\n                            <div>\n                                <span className=\"text\">\n                                    <CurrencyFormat value={ReturnTotal} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                </span>\n                                <p>Total Return</p>\n                            </div>\n                            <div className='icon_img'>\n                                <img className='img-fluid' src=\"/img/Return.png\" alt=\"\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-6 p-2\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n\n                            <ReactApexChart\n                                options={{\n                                    chart: {\n                                        type: 'area',\n                                        height: 350,\n                                        zoom: {\n                                            enabled: false\n                                        }\n                                    },\n                                    dataLabels: {\n                                        enabled: true\n                                    },\n                                    stroke: {\n                                        curve: 'straight'\n                                    },\n\n                                    labels: ExpenseChart.map((item) => item._id),\n                                    title: {\n                                        text: 'Fundamental Analysis of Expense Last 30 Days',\n                                        align: 'left'\n                                    },\n                                    subtitle: {\n                                        text: 'Price Movements',\n                                        align: 'left'\n                                    },\n                                    legend: {\n                                        horizontalAlign: 'left'\n                                    }\n                                }}\n                                series={[{\n                                    name: \"Expense Cost\",\n                                    data: ExpenseChart.map((item) => item.TotalAmount)\n                                }]}\n                                type=\"area\"\n                                height={350}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-6 p-2\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n\n                            <ReactApexChart\n                                options={{\n                                    chart: {\n                                        type: 'area',\n                                        height: 350,\n                                        zoom: {\n                                            enabled: false\n                                        }\n                                    },\n                                    dataLabels: {\n                                        enabled: true\n                                    },\n                                    stroke: {\n                                        curve: 'straight'\n                                    },\n\n                                    labels: SaleChart.map((item) => item._id),\n                                    title: {\n                                        text: 'Fundamental Analysis of Sales Last 30 Days',\n                                        align: 'left'\n                                    },\n                                    subtitle: {\n                                        text: 'Price Movements',\n                                        align: 'left'\n                                    },\n                                    legend: {\n                                        horizontalAlign: 'left'\n                                    }\n                                }}\n                                series={[{\n                                    name: \"Sales\",\n                                    data: SaleChart.map((item) => item.TotalAmount)\n                                }]}\n                                type=\"line\"\n                                height={350}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-6 p-2\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n\n                            <ReactApexChart\n                                options={{\n                                    chart: {\n                                        type: 'area',\n                                        height: 350,\n                                        zoom: {\n                                            enabled: false\n                                        }\n                                    },\n                                    dataLabels: {\n                                        enabled: true\n                                    },\n                                    stroke: {\n                                        curve: 'straight'\n                                    },\n\n                                    labels: PurchaseChart.map((item) => item._id),\n                                    title: {\n                                        text: 'Fundamental Analysis of Purchase Last 30 Days',\n                                        align: 'left'\n                                    },\n                                    subtitle: {\n                                        text: 'Price Movements',\n                                        align: 'left'\n                                    },\n                                    legend: {\n                                        horizontalAlign: 'left'\n                                    }\n                                }}\n                                series={[{\n                                    name: \"Purchase\",\n                                    data: PurchaseChart.map((item) => item.TotalAmount)\n                                }]}\n                                type=\"bar\"\n                                height={350}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-md-6 p-2\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n\n                            <ReactApexChart\n                                options={{\n                                    chart: {\n                                        type: 'area',\n                                        height: 350,\n                                        zoom: {\n                                            enabled: false\n                                        }\n                                    },\n                                    dataLabels: {\n                                        enabled: true\n                                    },\n                                    stroke: {\n                                        curve: 'smooth'\n                                    },\n\n                                    labels: ReturnChart.map((item) => item._id),\n                                    title: {\n                                        text: 'Fundamental Analysis of Return Last 30 Days',\n                                        align: 'left'\n                                    },\n                                    subtitle: {\n                                        text: 'Price Movements',\n                                        align: 'left'\n                                    },\n                                    legend: {\n                                        horizontalAlign: 'left'\n                                    }\n                                }}\n                                series={[{\n                                    name: \"Return\",\n                                    data: ReturnChart.map((item) => item.TotalAmount)\n                                }]}\n                                type=\"area\"\n                                height={350}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default Dashboard;"],"names":["AxiosHeader","headers","getToken","Dashboard","useEffect","async","store","dispatch","ShowLoader","URL","BaseURL","res","axios","HideLoader","status","SetExpenseChart","data","SetExpenseTotal","ErrorToast","e","ExpensesSummary","SetSaleChart","SetSaleTotal","SaleSummary","SetReturnChart","SetReturnTotal","ReturnSummary","SetPurchaseChart","SetPurchaseTotal","PurchaseSummary","ExpenseChart","useSelector","state","dashboard","ExpenseTotal","SaleChart","SaleTotal","ReturnChart","ReturnTotal","PurchaseChart","PurchaseTotal","map","item","TotalAmount","console","log","_jsxs","className","children","_jsx","CurrencyFormat","value","displayType","thousandSeparator","prefix","src","alt","ReactApexChart","options","chart","type","height","zoom","enabled","dataLabels","stroke","curve","labels","_id","title","text","align","subtitle","legend","horizontalAlign","series","name"],"sourceRoot":""}